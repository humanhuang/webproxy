#!/usr/bin/env node

require('colorful').colorful();

var program = require('commander');
var spmrc = require('spmrc');
var spawn = require('win-spawn');
var exists = require('fs').existsSync;
var readFile = require('fs').readFileSync;

program
  .usage('<command> [key] [value]');

program
  .option('set <key> <value>', 'set a key')
  .option('get <key>', 'get a key')
  .option('delete <key>', 'delete a key')
  .option('list', 'show your configuration')
  .option('edit', 'edit ~/.spm/spmrc-3x with your favorite editor');

program.on('--help', function() {
  console.log('  Examples:'.to.bold.blue.color);
  console.log();
  console.log('    $', 'spm config'.to.magenta.color, 'set registry http://spm.alipay.im');
  console.log('    $', 'spm config'.to.magenta.color, 'get registry');
  console.log('    $', 'spm config'.to.magenta.color, 'delete auth');
  console.log('    $', 'spm config'.to.magenta.color, 'list');
  console.log('    $', 'spm config'.to.magenta.color, 'edit');
  console.log();
});

program.parse(process.argv);

var val = program.args[0];

if (program.set && val) {
  spmrc.set(program.set, val);
} else if (program.get) {
  console.log(spmrc.get(program.get));
} else if (program.delete) {
  var data = spmrc.parse();
  delete data[program.delete];
  spmrc.write(data);
} else if (program.list) {
  console.log(exists(spmrc.spmrcfile) ? readFile(spmrc.spmrcfile, 'utf-8') : '');
} else if (program.edit) {
  var editor = process.env.EDITOR || 'vim';
  spawn(editor, [spmrc.spmrcfile], {stdio: 'inherit'});
} else {
  program.help();
}
