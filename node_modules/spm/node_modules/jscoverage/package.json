{
  "name": "jscoverage",
  "version": "0.3.8",
  "description": "a javascript coverage tool, can be used in node dev, and browser side js dev",
  "main": "index.js",
  "bin": {
    "jscoverage": "./bin/jscoverage"
  },
  "scripts": {
    "test": "mocha test/test.js"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "uglify-js": "1.3.4",
    "optimist": "0.3.1"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*",
    "xfs": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/fishbar/jscoverage.git"
  },
  "keywords": [
    "jscoverage",
    "node",
    "javascript",
    "coverage",
    "dev",
    "tool"
  ],
  "author": {
    "name": "fish",
    "email": "zhengxinlin@gmail.com"
  },
  "contributors": [
    {
      "name": "christineRR",
      "email": "rongkunli1215@gmail.com"
    }
  ],
  "license": "MIT",
  "readme": "jscoverage\n==========\njscoverage tool, both node or javascript support\n\n### install \n  \n    npm install jscoverage -g\n\n### get source code\n    git clone git://github.com/fishbar/jscoverage.git\n    cd ./jscoverage\n    mocha -R list test --coverage\n\n### using as cli command\n```shell\njscoverage\n# print help info\njscoverage source.js\n# convert source.js to source-cov.js\njscoverage source.js dest.js\n# convert source.js to dest.js\njscoverage sourcedir destdir --exclude a.js,b.js,c.js\n# convert all files in sourcedir to destdir, exclude list will be ignored\n```\nTODO, comming soon\n```sh\njscoverage sourcedir destdir --no-instrument\n```\n\n### using as node module\n\n```js\nvar jsc = require('jscoverage');\nvar abc = jsc.require(module, 'testmodule.js');\ndescribe('test', function () {\n    // TEST CODE HERE\n});\n```\n==== or =====\n```js\nvar jsc = require('jscoverage');\nrequire = jsc.mock(mo);\nvar abc = require('abc.js', true);\ndescribe('test', function () {\n    // TEST CODE HERE\n});\n```\n### env switchs\n\njscoverage do not process coverage by default,\nbecause when we writting test case in the begining, case always fail,\nand we need to fix problems by check the error stack, finding the exact line where error happened\n\nusing follow options, you can switch the functions\n\n    --coverage   enable coverage action, default nocoverage\n    --noinject   close inject action, default inject , sometimes you already using rewire module do the same thing\n\ni.e when you run test code by mocha:\n```sh\n    mocha test/ --coverage  # open coverage instrument\n    mocha test/ --noinject  # close inject when you are using rewire\n```\nor you can also do in this way:\n```js\nvar jsc = require('jscoverage');\njsc.enableCoverage(true);\njsc.enableInject(false);\n```\n    \n### run with mocha\n\noutput a html coverage reporter \n```sh\nmocha -R html-cov test/test.js --coverage > coverage.html\n```\n\n### print coverage info in cli\n\nyou can just print the coverage info in cli , like this:\n```js\n// add the following code to you test file\nvar jsc = require('jscoverage');\nprocess.on('exit', function () {\n  jsc.coverage(); // print summary info, cover percent\n  jsc.coverageDetail(); // print uncovered lines\n});\n```\n\n### mocha global leaks detect\n\nthe follow object will be detected, all of them are create by jscoverage\n\n    _$jscoverage, _$jscoverage_done, _$jscoverage_init, _$jscoverage_cond\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/fishbar/jscoverage/issues"
  },
  "homepage": "https://github.com/fishbar/jscoverage",
  "_id": "jscoverage@0.3.8",
  "_from": "jscoverage@~0.3.8"
}
