{
  "name": "source-map-url",
  "version": "0.2.0",
  "description": "Tools for working with sourceMappingURL comments.",
  "author": {
    "name": "Simon Lydell"
  },
  "license": "MIT",
  "main": "source-map-url.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/lydell/source-map-url"
  },
  "keywords": [
    "source map",
    "sourceMappingURL",
    "comment",
    "annotation"
  ],
  "scripts": {
    "test": "jshint source-map-url.js test/ && mocha"
  },
  "devDependencies": {
    "mocha": "~1.17.1",
    "chai": "~1.9.0",
    "jshint": "~2.4.3"
  },
  "testling": {
    "harness": "mocha",
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "chrome/latest",
      "firefox/latest",
      "opera/12",
      "opera/latest",
      "safari/5",
      "iphone/6",
      "android-browser/4"
    ]
  },
  "readme": "Overview [![Build Status](https://travis-ci.org/lydell/source-map-url.png?branch=master)](https://travis-ci.org/lydell/source-map-url)\r\n========\r\n\r\n[![browser support](https://ci.testling.com/lydell/source-map-url.png)](https://ci.testling.com/lydell/source-map-url)\r\n\r\nTools for working with sourceMappingURL comments.\r\n\r\n```js\r\nvar sourceMappingURL = require(\"source-map-url\")\r\n\r\nvar code = [\r\n  \"!function(){...}();\",\r\n  \"/*# sourceMappingURL=foo.js.map */\"\r\n].join(\"\\n\")\r\n\r\nsourceMappingURL.get(code)\r\n// foo.js.map\r\n\r\ncode = sourceMappingURL.set(code, \"/other/file.js.map\")\r\n// !function(){...}();\r\n// /*# sourceMappingURL=/other/file.js.map */\r\n\r\ncode = sourceMappingURL.insertBefore(code, \"\\n// License: MIT\")\r\n// !function(){...}();\r\n// // License: MIT\r\n// /*# sourceMappingURL=/other/file.js.map */\r\n\r\ncode = sourceMappingURL.remove(code)\r\n// !function(){...}();\r\n// // License: MIT\r\n\r\nsourceMappingURL.get(code)\r\n// null\r\n```\r\n\r\n\r\nInstallation\r\n============\r\n\r\n- `npm install source-map-url`\r\n- `bower install source-map-url`\r\n- `component install lydell/source-map-url`\r\n\r\nWorks with CommonJS, AMD and browser globals, through UMD.\r\n\r\n\r\nUsage\r\n=====\r\n\r\n### `sourceMappingURL.get(code)` ###\r\n\r\nReturns the url of the sourceMappingURL comment in `code`. Returns `null` if\r\nthere is no such comment. Note that the url can be the empty string and that\r\nboth the empty string and `null` are falsy. Consider using `if (url === null)\r\n{}` rather than `if (url) {}` if you need to tell those two cases apart.\r\n\r\n### `sourceMappingURL.set(code, url [, commentSyntax])` ###\r\n\r\nUpdates the sourceMappingURL comment in `code` to use `url`. Creates such a\r\ncomment if there is none. Returns the updated `code`.\r\n\r\nThe `commentSyntax` argument is optional. It is an array. The first element of\r\nit defines how a comment starts, while the second element defines how it ends.\r\nThe default value is `[\"/*\", \" */\"]`. `/**/` comments were chosen as default in\r\nfavor of `//` comments, because ideally they work with both JavaScript and CSS.\r\nThis way, you don’t have to think about what type of code you’re working with.\r\nHowever, Chrome sadly does not support `/**/` comments in JavaScript. So\r\ncurrently, you need to use `.set(code, url, [\"//\"])` for JavaScript that needs\r\nsource map support in Chrome. A [bug] has been filed about this.\r\n\r\n[bug]: http://code.google.com/p/chromium/issues/detail?id=341807\r\n\r\n### `sourceMappingURL.remove(code)` ###\r\n\r\nRemoves the sourceMappingURL comment in `code`. Does nothing if there is no\r\nsuch comment. Returns the updated `code`.\r\n\r\n### `sourceMappingURL.insertBefore(code, string)` ###\r\n\r\nInserts `string` before the sourceMappingURL comment in `code`. Appends\r\n`string` to `code` if there is no such comment.\r\n\r\nLets you append something to a file without worrying about breaking the\r\nsourceMappingURL comment (which needs to be at the end of the file).\r\n\r\n### `sourceMappingURL.regex` ###\r\n\r\nThe regex that is used to match sourceMappingURL comments. It matches both `//`\r\nand `/**/` comments, thus supporting both JavaScript and CSS.\r\n\r\n### `sourceMappingURL.SourceMappingURL(commentSyntax)` ###\r\n\r\nLets you create a new SourceMappingURL instance, using `commentSyntax` as\r\ndefault comment syntax for the `set` method.\r\n\r\nFor example, if you mainly work with JavaScript code that needs to have source\r\nmap support in Chrome, you could use it like this:\r\n\r\n```js\r\nvar SourceMappingURL = require(\"source-map-url\").SourceMappingURL\r\nvar sourceMappingURL = new SourceMappingURL([\"//\"])\r\n```\r\n\r\n\r\nLicense\r\n=======\r\n\r\n[The X11 (“MIT”) License](LICENSE).\r\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/lydell/source-map-url/issues"
  },
  "homepage": "https://github.com/lydell/source-map-url",
  "_id": "source-map-url@0.2.0",
  "_from": "source-map-url@~0.2.0"
}
