{
  "name": "async-task-mgr",
  "version": "1.1.0",
  "description": "A simple nodeJS module for async task manager. Identical tasks will be executed only once and the result will be saved for further use.",
  "main": "index.js",
  "scripts": {
    "test": "test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ottomao/async-task-mgr.git"
  },
  "keywords": [
    "async",
    "task",
    "manager"
  ],
  "author": {
    "name": "Otto Mao",
    "email": "ottomao@gmail.com",
    "url": "http://ottomao.com/"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/ottomao/async-task-mgr/issues"
  },
  "homepage": "https://github.com/ottomao/async-task-mgr",
  "readme": "async-task-mgr\n==============\n\n## Intro\nA simple nodeJS module for async task manager. Identical tasks will be executed only once and the result will be saved for further use.\n\n## Features\n\n* tasks with the same name are identified as **the same**, and will be executed only once\n* task result will be saved for further use\n\n\n## How to use\n\n``npm install async-task-mgr --save``\n\n## Sample\n```javascript\nvar asyncTask = require(\"async-task-mgr\");\n\nvar asyncTaskInstance = new asyncTask();\n\nfunction taskAction(callback){\n\tsetTimeout(function(){ //simulate an async task\n\t\tvar resultA = Math.floor(Math.random()*100),\n\t\t\tresultB = Math.floor(Math.random()*100),\n\t\t\tresultC = Math.floor(Math.random()*100);\n\n\t\tcallback(resultA, resultB, resultC);\n\t},2000); \n}\n\n//add a new task named task_A\n//when taskAction is done, its return value will be saved and apply to all the task with the same name\nasyncTaskInstance.addTask(\"task_A\",taskAction,function(resultA,resultB,resultC){ \n\tconsole.log(\"task A_1 result :\" + resultA + \" \" + resultB + \" \" + resultC); //all result generated by taskAction will be passed here\n});\n\n\n//add a new task named task_A\n/*\nsince a task with the same name has been added, this taskAction will not be executed.\nthe callback function will be put in a queue and will be called when previous callbacks are done.\n*/\nasyncTaskInstance.addTask(\"task_A\",taskAction,function(resultA,resultB,resultC){\n\tconsole.log(\"task A_2 result :\" + resultA + \" \" + resultB + \" \" + resultC);\n});\n\n\n//add a new task named task_X\n//a new task, have no relationship to the previous ones\nasyncTaskInstance.addTask(\"task_X\",taskAction,function(resultA,resultB,resultC){\n\tconsole.log(\"task X_0 result :\" + resultA + \" \" + resultB + \" \" + resultC);\n});\n\n```\n\n## Author\nOtto Mao \nottomao@gmail.com",
  "readmeFilename": "README.md",
  "_id": "async-task-mgr@1.1.0",
  "_from": "async-task-mgr@>=1.1.0"
}
